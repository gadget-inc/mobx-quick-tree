import { DateType, IntegerType, NullType } from "./simple";
import { lazyUnion, union } from "./union";
export * from "./api";
export * from "./types";
export declare const types: {
    boolean: import("./types").ISimpleType<boolean>;
    Date: DateType;
    identifier: import("./types").ISimpleType<string>;
    integer: IntegerType;
    literal: <T extends import("./simple").Primitives>(value: T) => import("./types").ISimpleType<T>;
    null: NullType;
    number: import("./types").ISimpleType<number>;
    string: import("./types").ISimpleType<string>;
    array: <T_1 extends import("./types").IAnyType>(childrenType: T_1) => import("./types").IArrayType<T_1>;
    compose: {
        <Types extends [import("./types").IAnyNodeModelType, ...import("./types").IAnyNodeModelType[]]>(name: string, ...types: Types): import("./types").INodeModelType<Types extends import("./types").INodeModelType<infer P extends import("./types").ModelProperties, any> ? P : Types extends [import("./types").INodeModelType<infer P_1 extends import("./types").ModelProperties, any>, ...infer Tail] ? P_1 & (Tail extends import("./types").INodeModelType<infer P extends import("./types").ModelProperties, any> ? P : Tail extends [import("./types").INodeModelType<infer P_1 extends import("./types").ModelProperties, any>, ...infer Tail] ? P_1 & (Tail extends import("./types").INodeModelType<infer P extends import("./types").ModelProperties, any> ? P : Tail extends [import("./types").INodeModelType<infer P_1 extends import("./types").ModelProperties, any>, ...infer Tail] ? P_1 & (Tail extends import("./types").INodeModelType<infer P extends import("./types").ModelProperties, any> ? P : Tail extends [import("./types").INodeModelType<infer P_1 extends import("./types").ModelProperties, any>, ...infer Tail] ? P_1 & (Tail extends import("./types").INodeModelType<infer P extends import("./types").ModelProperties, any> ? P : Tail extends [import("./types").INodeModelType<infer P_1 extends import("./types").ModelProperties, any>, ...infer Tail] ? P_1 & (Tail extends import("./types").INodeModelType<infer P extends import("./types").ModelProperties, any> ? P : Tail extends [import("./types").INodeModelType<infer P_1 extends import("./types").ModelProperties, any>, ...infer Tail] ? P_1 & (Tail extends import("./types").INodeModelType<infer P extends import("./types").ModelProperties, any> ? P : Tail extends [import("./types").INodeModelType<infer P_1 extends import("./types").ModelProperties, any>, ...infer Tail] ? P_1 & (Tail extends import("./types").INodeModelType<infer P extends import("./types").ModelProperties, any> ? P : Tail extends [import("./types").INodeModelType<infer P_1 extends import("./types").ModelProperties, any>, ...infer Tail] ? P_1 & (Tail extends import("./types").INodeModelType<infer P extends import("./types").ModelProperties, any> ? P : Tail extends [import("./types").INodeModelType<infer P_1 extends import("./types").ModelProperties, any>, ...infer Tail] ? P_1 & (Tail extends import("./types").INodeModelType<infer P extends import("./types").ModelProperties, any> ? P : Tail extends [import("./types").INodeModelType<infer P_1 extends import("./types").ModelProperties, any>, ...infer Tail] ? P_1 & (Tail extends import("./types").INodeModelType<infer P extends import("./types").ModelProperties, any> ? P : Tail extends [import("./types").INodeModelType<infer P_1 extends import("./types").ModelProperties, any>, ...infer Tail] ? P_1 & any : {}) : {}) : {}) : {}) : {}) : {}) : {}) : {}) : {}) : {}) : {}, Types extends import("./types").INodeModelType<any, infer O> ? O : Types extends [import("./types").INodeModelType<any, infer O_1>, ...infer Tail_1] ? O_1 & (Tail_1 extends import("./types").INodeModelType<any, infer O> ? O : Tail_1 extends [import("./types").INodeModelType<any, infer O_1>, ...infer Tail_1] ? O_1 & (Tail_1 extends import("./types").INodeModelType<any, infer O> ? O : Tail_1 extends [import("./types").INodeModelType<any, infer O_1>, ...infer Tail_1] ? O_1 & (Tail_1 extends import("./types").INodeModelType<any, infer O> ? O : Tail_1 extends [import("./types").INodeModelType<any, infer O_1>, ...infer Tail_1] ? O_1 & (Tail_1 extends import("./types").INodeModelType<any, infer O> ? O : Tail_1 extends [import("./types").INodeModelType<any, infer O_1>, ...infer Tail_1] ? O_1 & (Tail_1 extends import("./types").INodeModelType<any, infer O> ? O : Tail_1 extends [import("./types").INodeModelType<any, infer O_1>, ...infer Tail_1] ? O_1 & (Tail_1 extends import("./types").INodeModelType<any, infer O> ? O : Tail_1 extends [import("./types").INodeModelType<any, infer O_1>, ...infer Tail_1] ? O_1 & (Tail_1 extends import("./types").INodeModelType<any, infer O> ? O : Tail_1 extends [import("./types").INodeModelType<any, infer O_1>, ...infer Tail_1] ? O_1 & (Tail_1 extends import("./types").INodeModelType<any, infer O> ? O : Tail_1 extends [import("./types").INodeModelType<any, infer O_1>, ...infer Tail_1] ? O_1 & (Tail_1 extends import("./types").INodeModelType<any, infer O> ? O : Tail_1 extends [import("./types").INodeModelType<any, infer O_1>, ...infer Tail_1] ? O_1 & (Tail_1 extends import("./types").INodeModelType<any, infer O> ? O : Tail_1 extends [import("./types").INodeModelType<any, infer O_1>, ...infer Tail_1] ? O_1 & any : {}) : {}) : {}) : {}) : {}) : {}) : {}) : {}) : {}) : {}) : {}>;
        <Types_1 extends [import("./types").IAnyNodeModelType, ...import("./types").IAnyNodeModelType[]]>(...types: Types_1): import("./types").INodeModelType<Types_1 extends import("./types").INodeModelType<infer P extends import("./types").ModelProperties, any> ? P : Types_1 extends [import("./types").INodeModelType<infer P_1 extends import("./types").ModelProperties, any>, ...infer Tail] ? P_1 & (Tail extends import("./types").INodeModelType<infer P extends import("./types").ModelProperties, any> ? P : Tail extends [import("./types").INodeModelType<infer P_1 extends import("./types").ModelProperties, any>, ...infer Tail] ? P_1 & (Tail extends import("./types").INodeModelType<infer P extends import("./types").ModelProperties, any> ? P : Tail extends [import("./types").INodeModelType<infer P_1 extends import("./types").ModelProperties, any>, ...infer Tail] ? P_1 & (Tail extends import("./types").INodeModelType<infer P extends import("./types").ModelProperties, any> ? P : Tail extends [import("./types").INodeModelType<infer P_1 extends import("./types").ModelProperties, any>, ...infer Tail] ? P_1 & (Tail extends import("./types").INodeModelType<infer P extends import("./types").ModelProperties, any> ? P : Tail extends [import("./types").INodeModelType<infer P_1 extends import("./types").ModelProperties, any>, ...infer Tail] ? P_1 & (Tail extends import("./types").INodeModelType<infer P extends import("./types").ModelProperties, any> ? P : Tail extends [import("./types").INodeModelType<infer P_1 extends import("./types").ModelProperties, any>, ...infer Tail] ? P_1 & (Tail extends import("./types").INodeModelType<infer P extends import("./types").ModelProperties, any> ? P : Tail extends [import("./types").INodeModelType<infer P_1 extends import("./types").ModelProperties, any>, ...infer Tail] ? P_1 & (Tail extends import("./types").INodeModelType<infer P extends import("./types").ModelProperties, any> ? P : Tail extends [import("./types").INodeModelType<infer P_1 extends import("./types").ModelProperties, any>, ...infer Tail] ? P_1 & (Tail extends import("./types").INodeModelType<infer P extends import("./types").ModelProperties, any> ? P : Tail extends [import("./types").INodeModelType<infer P_1 extends import("./types").ModelProperties, any>, ...infer Tail] ? P_1 & (Tail extends import("./types").INodeModelType<infer P extends import("./types").ModelProperties, any> ? P : Tail extends [import("./types").INodeModelType<infer P_1 extends import("./types").ModelProperties, any>, ...infer Tail] ? P_1 & (Tail extends import("./types").INodeModelType<infer P extends import("./types").ModelProperties, any> ? P : Tail extends [import("./types").INodeModelType<infer P_1 extends import("./types").ModelProperties, any>, ...infer Tail] ? P_1 & any : {}) : {}) : {}) : {}) : {}) : {}) : {}) : {}) : {}) : {}) : {}, Types_1 extends import("./types").INodeModelType<any, infer O> ? O : Types_1 extends [import("./types").INodeModelType<any, infer O_1>, ...infer Tail_1] ? O_1 & (Tail_1 extends import("./types").INodeModelType<any, infer O> ? O : Tail_1 extends [import("./types").INodeModelType<any, infer O_1>, ...infer Tail_1] ? O_1 & (Tail_1 extends import("./types").INodeModelType<any, infer O> ? O : Tail_1 extends [import("./types").INodeModelType<any, infer O_1>, ...infer Tail_1] ? O_1 & (Tail_1 extends import("./types").INodeModelType<any, infer O> ? O : Tail_1 extends [import("./types").INodeModelType<any, infer O_1>, ...infer Tail_1] ? O_1 & (Tail_1 extends import("./types").INodeModelType<any, infer O> ? O : Tail_1 extends [import("./types").INodeModelType<any, infer O_1>, ...infer Tail_1] ? O_1 & (Tail_1 extends import("./types").INodeModelType<any, infer O> ? O : Tail_1 extends [import("./types").INodeModelType<any, infer O_1>, ...infer Tail_1] ? O_1 & (Tail_1 extends import("./types").INodeModelType<any, infer O> ? O : Tail_1 extends [import("./types").INodeModelType<any, infer O_1>, ...infer Tail_1] ? O_1 & (Tail_1 extends import("./types").INodeModelType<any, infer O> ? O : Tail_1 extends [import("./types").INodeModelType<any, infer O_1>, ...infer Tail_1] ? O_1 & (Tail_1 extends import("./types").INodeModelType<any, infer O> ? O : Tail_1 extends [import("./types").INodeModelType<any, infer O_1>, ...infer Tail_1] ? O_1 & (Tail_1 extends import("./types").INodeModelType<any, infer O> ? O : Tail_1 extends [import("./types").INodeModelType<any, infer O_1>, ...infer Tail_1] ? O_1 & (Tail_1 extends import("./types").INodeModelType<any, infer O> ? O : Tail_1 extends [import("./types").INodeModelType<any, infer O_1>, ...infer Tail_1] ? O_1 & any : {}) : {}) : {}) : {}) : {}) : {}) : {}) : {}) : {}) : {}) : {}>;
    };
    custom: <InputType, OutputType>(options: import("mobx-state-tree").CustomTypeOptions<InputType, OutputType>) => import("./types").IType<InputType, OutputType, OutputType>;
    enumeration: {
        <EnumOptions extends string>(name: string, options: readonly EnumOptions[]): import("./types").ISimpleType<EnumOptions>;
        <EnumOptions_1 extends string>(options: readonly EnumOptions_1[]): import("./types").ISimpleType<EnumOptions_1>;
    };
    frozen: <T_2 = any>() => import("./types").ISimpleType<T_2>;
    late: <T_3 extends import("./types").IAnyType>(fn: () => T_3) => T_3;
    lazyUnion: typeof lazyUnion;
    map: <T_4 extends import("./types").IAnyType>(childrenType: T_4) => import("./types").IMapType<T_4>;
    maybe: <T_5 extends import("./types").IAnyType>(type: T_5) => import("./types").IMaybeType<T_5>;
    maybeNull: <T_6 extends import("./types").IAnyType>(type: T_6) => import("./types").IMaybeNullType<T_6>;
    model: import("./model").ModelFactory;
    optional: import("./optional").OptionalFactory;
    reference: <TargetType extends import("./types").IAnyComplexType>(targetType: TargetType, options?: import("mobx-state-tree").ReferenceOptions<TargetType["mstType"]> | undefined) => import("./types").IReferenceType<TargetType>;
    refinement: <T_7 extends import("./types").IAnyType>(type: T_7, predicate: (snapshot: import("mobx-state-tree").Instance<T_7> | import("mobx-state-tree").Instance<T_7["mstType"]>) => boolean) => import("./types").IType<T_7["InputType"], T_7["OutputType"], import("./types").InstanceWithoutSTNTypeForType<T_7>>;
    safeReference: <TargetType_1 extends import("./types").IAnyComplexType>(targetType: TargetType_1, options?: import("./reference").SafeReferenceOptions<TargetType_1> | undefined) => import("./types").IMaybeType<import("./types").IReferenceType<TargetType_1>>;
    union: typeof union;
};
